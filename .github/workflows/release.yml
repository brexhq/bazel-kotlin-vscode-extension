name: Create GitHub Release

on:
  push:
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-current-version.outputs.version }}
      should_release: ${{ steps.release-check.outputs.should_release }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to ensure we can get all tags
      
      - name: Get current version from package.json
        id: get-current-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      - name: Get latest release version
        id: get-latest-release
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: ${{ github.repository }}
          excludes: prerelease, draft
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install semver
        run: npm install semver

      - name: Check version for release
        uses: actions/github-script@v6
        id: check-version
        with:
          script: |
            const semver = require('semver');
            
            // Remove 'v' prefix if present for proper semver comparison
            const latestVersion = '${{ steps.get-latest-release.outputs.release }}'.replace(/^v/, '');
            const currentVersion = '${{ steps.get-current-version.outputs.version }}';
            
            console.log(`Comparing versions - Current: ${currentVersion}, Latest: ${latestVersion}`);
            
            // Check if versions are different and current is newer
            if (latestVersion !== currentVersion) {
              // This will correctly handle pre-release versions like 0.0.1-rc.3
              const shouldRelease = semver.gt(currentVersion, latestVersion);
              console.log(`Should release: ${shouldRelease}`);
              return shouldRelease;
            } else {
              console.log("Versions are identical - will not create a new release");
              return false;
            }
          result-encoding: string

      - name: Set release output
        id: release-check
        run: |
          echo "should_release=${{ steps.check-version.outputs.result }}" >> $GITHUB_OUTPUT

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Set up Bazel
        uses: bazelbuild/setup-bazelisk@v2
          
      - name: Install dependencies
        run: npm ci
      
      - name: Package Extension
        run: npx vsce package

      - name: Build release archive
        run: |
          # cd to the aspect workspace and build a binary
          cd bazel/aspect
          bazel build //lsp_info_extractor:lsp_info_extractor_deploy.jar
        
          # Create release directory
          mkdir -p release/bazel/aspect
          
          # Copy Bazel build artifacts to release directory
          # Example: Copy JAR files from bazel-bin
          cp bazel-bin/lsp_info_extractor/lsp_info_extractor_deploy.jar release/bazel/aspect
          
          cp BUILD.release.bazel release/bazel/aspect/BUILD.bazel
          cp WORKSPACE release/bazel/aspect
          cp kotlin_lsp_info.bzl release/bazel/aspect
          
          # Create a zip archive
          cd release
          zip -r "${{ github.workspace }}/kls-aspect.zip" *
          cd "${{ github.workspace }}"
        
      - name: Get VSIX path
        id: get-vsix-path
        run: echo "vsix_path=$(find . -maxdepth 1 -name "*.vsix" | head -n 1)" >> $GITHUB_OUTPUT
          
      - name: Create tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ needs.check-version.outputs.version }} -m "Release v${{ needs.check-version.outputs.version }}"
          git push origin v${{ needs.check-version.outputs.version }}
          
      - name: Create GitHub Release with auto-generated notes
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ${{ steps.get-vsix-path.outputs.vsix_path }}
            kls-aspect.zip