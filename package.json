{
  "name": "bazel-kotlin",
  "displayName": "Bazel Kotlin",
  "description": "Extension to support Bazel with Kotlin Language Server and Kotlin Debug Adapter",
  "version": "0.5.3",
  "publisher": "Brex",
  "icon": "resources/kotlin-bazel-logo.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/brexhq/bazel-kotlin-vscode-extension.git"
  },
  "engines": {
    "vscode": "^1.94.0"
  },
  "categories": [
    "Other",
    "Programming Languages",
    "Debuggers",
    "Testing"
  ],
  "activationEvents": [
    "onDebug",
    "onLanguage:kotlin"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "languages": [
      {
        "id": "kotlin",
        "extensions": [
          ".kt"
        ],
        "aliases": [
          "Kotlin",
          "kotlin"
        ],
        "configuration": "./languageConfiguration.json"
      }
    ],
    "breakpoints": [
      {
        "language": "kotlin"
      }
    ],
    "grammars": [
      {
        "language": "kotlin",
        "scopeName": "source.kotlin",
        "path": "./syntaxes/kotlin.tmLanguage.json"
      }
    ],
    "commands": [
      {
        "command": "bazel-kotlin.bazelSync",
        "title": "Bazel KLS sync"
      },
      {
        "command": "bazel-kotlin.clearCaches",
        "title": "Kotlin: Clear Language Server Caches",
        "category": "Kotlin"
      },
      {
        "command": "bazel-kotlin.stopBuild",
        "title": "Bazel KLS Sync: Stop Running Build",
        "icon": "$(stop)"
      }
    ],
    "debuggers": [
      {
        "type": "kotlin",
        "label": "Debug Bazel Kotlin/JVM binary",
        "configurationSnippets": [
          {
            "label": "Debug Kotlin with Bazel",
            "description": "Launch a Kotlin binary using Bazel",
            "body": {
              "type": "kotlin",
              "name": "Launch Kotlin with Bazel",
              "request": "launch",
              "bazelTarget": "//my/package:my_binary",
              "mainClass": "com.example.MainKt",
              "workspaceRoot": "${workspaceFolder}"
            }
          }
        ],
        "configurationAttributes": {
          "launch": {
            "required": ["bazelTarget", "mainClass", "workspaceRoot"],
            "properties": {
              "bazelTarget": {
                "type": "string",
                "description": "the bazel binary/test target to debug"
              },
              "mainClass": {
                "type": "string",
                "description": "the main class for the binary/test target"
              },
              "workspaceRoot": {
                "type": "string",
                "description": "the bazel workspace root",
                "default": "${workspaceFolder}"
              },
              "javaVersion": {
                "type": "string",
                "description": "The JVM version to be used with debugger",
                "default": "11"
              },
              "buildFlags": {
                "type": "array",
                "description": "a list of bazel flags to used in the bazel build by the debug adapter before launching the program"
              },
              "additionalArgs": {
                "type": "array",
                "description": "an optional list of additional args to be passed to the JVM process"
              },
              "vmArguments": {
                "type": "string",
                "description": "Arguments to be passed to the JVM process"
              },
              "envVars": {
                "type": "object",
                "description": "Env vars to be passed to the test runner under the debugger",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "bazel-kotlin.bazelSync",
          "group": "inline",
          "when": "true"
        }
      ]
    },
    "configuration": {
      "title": "Bazel KLS Sync",
      "properties": {
        "bazelKotlin.enabled": {
          "type": "boolean",
          "default": true
        },
        "bazelKotlin.languageServerVersion": {
          "type": "string",
          "default": "v1.6.3-bazel"
        },
        "bazelKotlin.jvmOpts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "bazelKotlin.aspectPath": {
          "type": "string",
          "description": "Optionally a custom path to the aspect workspace used by the LSP. If not provided, the extension will download the latest aspect release from Github. Typically used for iterating on the aspect."
        },
        "bazelKotlin.path": {
          "type": "string",
          "default": "",
          "description": "Optionally a custom path to the language server executable."
        },
        "bazelKotlin.transport": {
          "type": "string",
          "enum": [
            "stdio",
            "tcp"
          ],
          "description": "The transport layer beneath the language server protocol. Note that the extension will launch the server even if a TCP socket is used.",
          "default": "stdio"
        },
        "bazelKotlin.port": {
          "type": "integer",
          "description": "The port to which the client will attempt to connect to. A random port is used if zero. Only used if the transport layer is TCP.",
          "default": 0
        },
        "bazelKotlin.debugAttach.enabled": {
          "type": "boolean",
          "description": "[DEBUG] Whether the language server should listen for debuggers, i.e. be debuggable while running in VSCode. This is ONLY useful if you need to debug the language server ITSELF.",
          "default": false
        },
        "bazelKotlin.debugAttach.port": {
          "type": "integer",
          "description": "[DEBUG] If transport is stdio this enables you to attach to the running language server with a debugger. This is ONLY useful if you need to debug the language server ITSELF.",
          "default": 5009
        },
        "bazelKotlin.debugAttach.autoSuspend": {
          "type": "boolean",
          "description": "[DEBUG] If enabled (together with debugAttach.enabled), the language server will not immediately launch but instead listen on the specified attach port and wait for a debugger. This is ONLY useful if you need to debug the language server ITSELF.",
          "default": false
        },
        "bazelKotlin.lazyCompilation": {
          "type": "boolean",
          "default": true,
          "description": "Enables lazy compilation, meaning source files will either be compiled only on-demand (indirectly referenced through other symbols) or when opened explicitly. This is helpful to improve performance in a large repository."
        },
        "bazelKotlin.watchFiles": {
          "type": "array",
          "default": [
            "**/*.kt",
            "**/*.kts",
            "**/*.java",
            "**/pom.xml",
            "**/build.gradle",
            "**/settings.gradle"
          ],
          "description": "Specifies glob patterns of files, which would be watched by LSP client. The LSP client doesn't support watching files outside a workspace folder."
        },
        "bazelKotlin.trace.server": {
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VSCode and the Kotlin language server.",
          "scope": "window"
        },
        "bazelKotlin.jvmTarget": {
          "type": "string",
          "default": "17",
          "description": "Specifies the JVM target, e.g. '11' or '17'."
        },
        "bazelKotlin.diagnostics.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Whether diagnostics (e.g. errors or warnings from the Kotlin compiler) should be emitted."
        },
        "bazelKotlin.diagnostics.level": {
          "type": "string",
          "default": "hint",
          "enum": [
            "error",
            "warning",
            "information",
            "hint"
          ],
          "description": "The minimum severity of diagnostics to emit."
        },
        "bazelKotlin.diagnostics.debounceTime": {
          "type": "integer",
          "default": 250,
          "description": "[DEBUG] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possible stability issues."
        },
        "bazelKotlin.linting.debounceTime": {
          "type": "integer",
          "default": 250,
          "deprecationMessage": "The option has been renamed to `bazelKotlin.diagnostics.debounceTime`",
          "description": "[DEBUG] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possible stability issues."
        },
        "bazelKotlin.scripts.buildScriptsEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether language features are provided for .gradle.kts scripts. Experimental and may not work properly."
        },
        "bazelKotlin.indexing.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Whether global symbols in the project should be indexed automatically in the background. This enables e.g. code completion for unimported classes and functions."
        },
        "bazelKotlin.completion.snippets.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Specifies whether code completion should provide snippets (true) or plain-text items (false)."
        },
        "bazelKotlin.debugAdapter.enabled": {
          "type": "boolean",
          "default": false,
          "description": "[Recommended] Specifies whether the debug adapter should be used. When enabled a debugger for Kotlin will be available."
        },
        "bazelKotlin.debugAdapter.version": {
          "type": "string",
          "default": "v1.6.3-bazel",
          "description": "The debug adapter version from Github releases"
        },
        "bazelKotlin.debugAdapter.path": {
          "type": "string",
          "description": "Optionally a custom path to the debug adapter executable."
        },
        "bazelKotlin.debounceTime": {
          "type": "integer",
          "default": 250,
          "description": "[DEPRECATED] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possible stability issues.",
          "deprecationMessage": "Use 'bazelKotlin.linting.debounceTime' instead"
        },
        "bazelKotlin.externalSources.useKlsScheme": {
          "type": "boolean",
          "default": true,
          "description": "[Recommended] Specifies whether URIs inside JARs should be represented using the 'kls'-scheme."
        },
        "bazelKotlin.externalSources.autoConvertToKotlin": {
          "type": "boolean",
          "default": false,
          "description": "Specifies whether decompiled/external classes should be auto-converted to Kotlin."
        },
        "bazelKotlin.snippetsEnabled": {
          "type": "boolean",
          "default": true,
          "description": "[DEPRECATED] Specifies whether code completion should provide snippets (true) or plain-text items (false).",
          "deprecationMessage": "Use 'bazelKotlin.completion.snippets.enabled'"
        },
        "bazelKotlin.inlayHints.typeHints": {
          "type": "boolean",
          "default": false,
          "description": "Whether to provide inlay hints for types on declaration sites or not."
        },
        "bazelKotlin.inlayHints.parameterHints": {
          "type": "boolean",
          "default": false,
          "description": "Whether to provide inlay hints for parameters on call sites or not."
        },
        "bazelKotlin.inlayHints.chainedHints": {
          "type": "boolean",
          "default": false,
          "description": "Whether to provide inlay hints on chained function calls or not."
        },
        "bazelKotlin.buildFlags" : {
          "type": "array",
          "default": [],
          "description": "A list of build flags to be passed to the bazel build command during a sync."
        },
        "bazelKotlin.formatting.formatter": {
          "type": "string",
          "enum": ["ktlint", "ktfmt", "none"],
          "default": "ktlint",
          "description": "Formatter to use for Kotlin files."
        },
        "bazelKotlin.formatting.ktlint.ktlintPath": {
          "type": "string",
          "default": "ktlint",
          "description": "Path to the ktlint binary. Only used when formatter is set to 'ktlint'."
        },
        "bazelKotlin.formatting.ktlint.editorConfigPath": {
          "type": "string",
          "default": ".editorconfig",
          "description": "Path to the .editorconfig file used by ktlint. Only used when formatter is set to 'ktlint'."
        }
      }
    },
    "views": {
      "test": [
        {
          "id": "bazelKotlin.kotestTests",
          "name": "Kotest Tests"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test",
    "package-extension": "vsce package"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.94.0",
    "@types/sinon": "^10.0.14",
    "@typescript-eslint/eslint-plugin": "^8.17.0",
    "@typescript-eslint/parser": "^8.17.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/vsce": "^2.24.0",
    "eslint": "^9.16.0",
    "ts-loader": "^9.5.1",
    "typescript": "^5.7.2",
    "vscode-languageclient": "^8.1.0",
    "webpack": "^5.95.0",
    "webpack-cli": "^5.1.4",
    "sinon": "^15.0.0",
    "proxyquire": "^2.1.3",
    "@types/proxyquire": "^1.3.3"
  },
  "dependencies": {
    "@types/yauzl": "^2.10.3",
    "find-process": "1.4.1",
    "node-fetch": "^2.6.7",
    "node-pty": "^0.10.1",
    "vscode-languageclient": "^8.1.0",
    "yauzl": "^3.2.0"
  }
}
